//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré à partir d'un modèle.
//
//     Des modifications manuelles apportées à ce fichier peuvent conduire à un comportement inattendu de votre application.
//     Les modifications manuelles apportées à ce fichier sont remplacées si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjetBDMuretDave.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class VisiteMedicale
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public VisiteMedicale()
        {
            this.ExamenRealises = new HashSet<ExamenRealise>();
        }
    
        public decimal IdVisiteMedicale { get; set; }

        [DisplayFormat(ApplyFormatInEditMode = true, DataFormatString = "{0:dd/MM/yyyy}")]
        [Required(ErrorMessage = "La date de la visite est obligatoire")]
        [DataType(DataType.Date,ErrorMessage = "Veuillez entrez une date valide sous le format jj/MM/aaaa")]
        public System.DateTime Date { get; set; }

        public decimal IdEmploi { get; set; }
        public decimal IdLieu { get; set; }
    
        public virtual Emploi Emploi { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ExamenRealise> ExamenRealises { get; set; }
        public virtual Lieu Lieu { get; set; }

        public string PrixTotalVisite
        {
            get
            {
                decimal prixVisite = 0;
                foreach(var examen in ExamenRealises)
                {
                    if(Emploi.TypeEmploi.Equals("0"))
                    {
                        prixVisite += examen.TypeExaman.PrixNonSoumis;
                    }
                    else
                    {
                        prixVisite += examen.TypeExaman.PrixSoumis;
                    }
                }
                return prixVisite.ToString() + "€";
            }
        }
    }
}
